version: 2.1

aliases:
  - &docker
    - image: cimg/node:18.20.1-browsers

  - &environment
    TZ: /usr/share/zoneinfo/America/Los_Angeles

  - &TEST_PARALLELISM 20

  - &attach_workspace
    at: build

commands:
  setup_node_modules:
    description: "Restore node_modules"
    steps:
      - restore_cache:
          name: Restore yarn cache
          keys:
            - v2-yarn_cache-{{ arch }}-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies
          command: |
            yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
            if [ $? -ne 0 ]; then
              yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
            fi
          environment:
          # If we start needing the Electron binary, please ensure the binary is cached in CI following https://www.electronjs.org/docs/latest/tutorial/installation
            ELECTRON_SKIP_BINARY_DOWNLOAD: 1
      - save_cache:
          name: Save yarn cache
          key: v2-yarn_cache-{{ arch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

# The CircleCI API doesn't yet support triggering a specific workflow, but it
# does support triggering a pipeline. So as a workaround you can triggger the
# entire pipeline and use parameters to disable everything except the workflow
# you want. CircleCI recommends this workaround here:
# https://support.circleci.com/hc/en-us/articles/360050351292-How-to-trigger-a-workflow-via-CircleCI-API-v2-
parameters:
  # This is only set when triggering the CI pipeline via an API request.
  prerelease_commit_sha:
    type: string
    default: ''

jobs:
 # REACT BUILD & TEST JOBS
  yarn_build:
    docker:
      - image: cimg/node:18.20.1-browsers
    resource_class: large
    parallelism: 40
    steps:
      - checkout
      - setup_node_modules
      - run: yarn build --ci=circleci
      - persist_to_workspace:
          root: .
          paths:
            - build
  
  yarn_test:
    docker:
      - image: cimg/node:18.20.1-browsers
    resource_class: 2xlarge+
    steps:
      - checkout
      - setup_node_modules
      - run:
          name: Yarn install
          command: yarn install
      - run:
          name: Run Tests
          command: yarn test

  download_build:
    docker: *docker
    environment: *environment
    parameters:
      revision:
        type: string
    steps:
      - checkout
      - setup_node_modules
      - run:
          name: Download artifacts for revision
          command: |
              git fetch origin main
              cd ./scripts/release && yarn && cd ../../
              scripts/release/download-experimental-build.js --commit=<< parameters.revision >> --allowBrokenCI
      - persist_to_workspace:
          root: .
          paths:
            - build

  process_artifacts_combined:
    docker: *docker
    environment: *environment
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_node_modules
      - run: echo "<< pipeline.git.revision	>>" >> build/COMMIT_SHA
      - run: |
          mkdir -p ./build/__test_utils__
          node ./scripts/print-warnings/print-warnings.js > build/__test_utils__/ReactAllWarnings.js
      # Compress build directory into a single tarball for easy download
      - run: tar -zcvf ./build.tgz ./build
        # TODO: Migrate scripts to use `build` directory instead of `build2`
      - run: cp ./build.tgz ./build2.tgz
      - store_artifacts:
          path: ./build2.tgz
      - store_artifacts:
          path: ./build.tgz

# DEVTOOLS BUILD AND TEST JOBS 
  build_devtools_and_process_artifacts:
    docker:
      - image: cimg/node:18.20.1-browsers
    environment: *environment
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_node_modules
      - run:
          name: Yarn install
          command: yarn install
      - run:
          environment:
            RELEASE_CHANNEL: experimental
          command: ./scripts/circleci/pack_and_store_devtools_artifacts.sh
      - store_artifacts:
          path: ./build/devtools.tgz
      # Simplifies getting the extension for local testing
      - store_artifacts:
          path: ./build/devtools/chrome-extension.zip
          destination: react-devtools-chrome-extension.zip
      - store_artifacts:
          path: ./build/devtools/firefox-extension.zip
          destination: react-devtools-firefox-extension.zip

  run_devtools_e2e_tests:
    docker:
      - image: cimg/node:18.20.1-browsers
    environment: *environment
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_node_modules
      - run:
          name: Playwright install deps
          command: |
            npx playwright install
            sudo npx playwright install-deps
      - run:
          environment:
            RELEASE_CHANNEL: experimental
          command: ./scripts/circleci/run_devtools_e2e_tests.js

  run_devtools_tests_for_versions:
    docker:
      - image: cimg/node:18.20.1-browsers
    environment: *environment
    parallelism: *TEST_PARALLELISM
    parameters:
      version:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_node_modules
      - run: ./scripts/circleci/download_devtools_regression_build.js << parameters.version >> --replaceBuild
      - run: node ./scripts/jest/jest-cli.js --build --project devtools --release-channel=experimental --reactVersion << parameters.version >> --ci=circleci

  run_devtools_e2e_tests_for_versions:
    docker:
      - image: cimg/node:18.20.1-browsers
    environment: *environment
    parallelism: *TEST_PARALLELISM
    parameters:
      version:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_node_modules
      - run:
          name: Playwright install deps
          command: |
            npx playwright install
            sudo npx playwright install-deps
      - run: ./scripts/circleci/download_devtools_regression_build.js << parameters.version >>
      - run:
          environment:
            RELEASE_CHANNEL: experimental
          command: ./scripts/circleci/run_devtools_e2e_tests.js << parameters.version >>
      - run:
          name: Cleanup build regression folder
          command: rm -r ./build-regression
      - store_artifacts:
          path: ./tmp/screenshots

  publish_prerelease:

    parameters:
      commit_sha:
        type: string
      release_channel:
        type: string
      dist_tag:
        type: string
    docker: *docker
    environment: *environment
    steps:
      - checkout
      - setup_node_modules
      - run:
          name: Run publish script
          command: |
            git fetch origin main
            cd ./scripts/release && yarn && cd ../../
            scripts/release/prepare-release-from-ci.js --skipTests -r << parameters.release_channel >> --commit=<< parameters.commit_sha >>
            cp ./scripts/release/ci-npmrc ~/.npmrc
            scripts/release/publish.js --ci --tags << parameters.dist_tag >>


# PLAYGROUND COMPILER JOBS
  playground:
    docker:
      - image: cimg/node:18.20.1-browsers
    working_directory: ~/project/compiler
    steps:
      - checkout # check out the code in the project directory
      - setup_node_modules
      - run: | 
          cd compiler
          pwd
          yarn add playwright -W
      - run: |
          pwd
          cd compiler
          yarn install --frozen-lockfile
      - run: | 
          pwd
          cd compiler
          npx playwright install --with-deps chromium
      - run: |
          pwd
          cd compiler
          yarn install
      - run: |
          pwd
          cd compiler
          yarn playwright install
      - run: | 
          pwd
          cd compiler
          yarn workspace playground test
  
# RUST COMPILER JOBS
  rust_test:
    docker:
      - image: cimg/rust:1.80.0
    working_directory: ~/project/compiler
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ checksum "Cargo.lock" }}
      - run: |
          sudo apt-get update
      - run: |
          sudo apt-get install libicu-dev
      - run: |
          pwd
          cd compiler
          cargo test --manifest-path=Cargo.toml
      - save_cache:
          key: cargo-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo
  
  rust_lint:
    docker:
      - image: cimg/rust:1.80.0
    working_directory: ~/project/compiler
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ checksum "Cargo.lock" }}
      - run: |
          rustup toolchain install nightly-2023-08-01-x86_64-unknown-linux-gnu
      - run: |
          rustup default nightly-2023-08-01-x86_64-unknown-linux-gnu
      - run: |
          pwd
          cd compiler
          grep -r --include "*.rs" --files-without-match "@generated" crates | xargs rustup run nightly-2023-08-01 rustfmt --check --config="skip_children=true"
      - save_cache:
          key: cargo-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo
  
  rust_build:
    docker:
      - image: cimg/rust:1.80.0
    working_directory: ~/project/compiler
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-{{ checksum "Cargo.lock" }}
      - run: |
          sudo apt-get update
      - run: |
          sudo apt-get install libicu-dev
      - run: | 
          pwd
          cd compiler
          cargo build --release
      - save_cache:
          key: cargo-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo

# TYPESCRIPT JOBS
  typescript_lint:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - setup_node_modules
      - run: yarn workspace babel-plugin-react-compiler lint
  
  typescript_jest:
    docker:
      - image: cimg/node:18.20.1-browsers
    steps:
      - checkout
      - setup_node_modules
      - run: yarn workspace babel-plugin-react-compiler jest
  
  typescript test:
    docker:
      - image: cimg/node:18.20.1-browsers
    steps:
      - checkout
      - setup_node_modules
      - run: yarn workspace ${{ matrix.workspace_name }} test

# TEST_FUZZ
  test_fuzz:
    docker:
      - image: cimg/node:18.20.1-browsers
    steps:
      - checkout
      - setup_node_modules
      - run: |
         FUZZ_TEST_SEED=$RANDOM yarn test fuzz --ci=circleci
         FUZZ_TEST_SEED=$RANDOM yarn test --prod fuzz --ci=circleci

  # Shared Lint
  prettier:
    docker:
      - image: cimg/node:18.20.1-browsers
    steps:
      - checkout
      - setup_node_modules
      - run: yarn prettier-check
  
  eslint:
    docker:
      - image: cimg/node:18.20.1-browsers
    steps:
      - checkout
      - setup_node_modules
      - run: node ./scripts/tasks/eslint
  
  checklicense:
    docker:
      - image: cimg/node:18.20.1-browsers
    steps:
      - checkout
      - setup_node_modules
      - run: ./scripts/circleci/check_license.sh
  
  test_print_warnings:
    docker:
      - image: cimg/node:18.20.1-browsers
    steps:
      - checkout
      - setup_node_modules
      - run: ./scripts/circleci/test_print_warnings.sh

# Runtime Build and Test
  flow:
    docker:
      - image: cimg/node:18.20.1-browsers
    steps:
      - checkout
      - setup_node_modules
      - run: node ./scripts/tasks/flow-ci
  
  discover_flow_inline_configs:
    docker:
      - image: cimg/node:18.20.1-browsers
    steps:
      - checkout
      - setup_node_modules
      - run: |
          node ./scripts/derrys-script.js
  
  check_generated_fizz_runtime:
    docker:
      - image: cimg/node:18.20.1-browsers
    steps:
      - checkout
      - setup_node_modules
      - run: |
          yarn generate-inline-fizz-runtime
          git diff --quiet || (echo "There was a change to the Fizz runtime. Run `yarn generate-inline-fizz-runtime` and check in the result." && false)

  # ----- FEATURE FLAGS -----
  flags:
    docker:
      - image: cimg/node:18.20.1-browsers
    steps:
      - checkout
      - setup_node_modules
      - run: yarn flags
  
  test-runtime:
    docker:
      - image: cimg/node:18.20.1-browsers
    steps:
      - checkout
      - setup_node_modules
      #- run: yarn test -r=stable --env=development -r=stable --env=production -r=experimental --env=development -r=experimental --env=production -r=www-classic --env=development --variant=false -r=www-classic --env=production --variant=false -r=www-classic --env=development --variant=true -r=www-classic --env=production --variant=true -r=www-modern --env=development --variant=false -r=www-modern --env=production --variant=false -r=www-modern --env=development --variant=true -r=www-modern --env=production --variant=true -r=xplat --env=development --variant=false -r=xplat --env=development --variant=true -r=xplat --env=production --variant=false -r=xplat --env=production --variant=true -r=stable --env=development --persistent -r=experimental --env=development --persistent --ci=circleci 
      - run: | 
          yarn test --ci=circleci
  
  build_and_lint:
    docker:
      - image: cimg/node:18.20.1-browsers
    steps:
      - checkout
      - setup_node_modules
      - run: yarn build --ci=circleci
      - run: yarn lint-build
      - run: ls -R build
  
  test_build:
    docker:
      - image: cimg/node:18.20.1-browsers
    steps:
      - checkout
      - setup_node_modules
      - restore_cache:
          keys:
            - v1-build-{{ checksum "src/" }}
            - v1-build-
      - run: yarn test --ci=github
      - run: |
          yarn extract-errors
          git diff --quiet || (echo "Found unminified errors. Either update the error codes map or disable error minification for the affected build, if appropriate." && false)
  
workflows:

  # build_and_test:
  #   jobs:
  #     - yarn_build
  #     - yarn_test:
  #         requires:
  #           - yarn_build

  
  # devtools:
  #   jobs:
  #     - run_devtools_e2e_tests
  #     - run_devtools_e2e_tests_for_versions:
  #         matrix:
  #           parameters:
  #             version:
  #               - "16.0"
  #               - "16.5" # schedule package
  #               - "16.8" # hooks
  #               - "17.0"
  #               - "18.0"

  # playground:
  #   jobs:
  #     - playground
  
  # rust:
  #   jobs:
  #     - rust_test
  #     - rust_lint
  #     - rust_build
  
  typescript:
    jobs:
     - typescript_lint
     - typescript_jest
     - typescript test

  # test-fuzz:
  #   jobs:
  #     - test_fuzz

  # shared-lint:
  #   jobs:
  #     - prettier
  #     - eslint
  #     - checklicense
  #     - test_print_warnings
  
  # runtime-build-and-test:
  #   jobs:
  #     # - flow
  #     # - discover_flow_inline_configs
  #     - check_generated_fizz_runtime
  #     - flags
  #     - test-runtime
  #     - build_and_lint
  #     - test_build:
  #         requires:
  #           - build_and_lint
  

      
      
      # - process_artifacts_combined:
      #     requires:
      #       - yarn_build

  # devtools_regression_tests:
  #   unless: << pipeline.parameters.prerelease_commit_sha >>
  #   triggers:
  #     - schedule:
  #         # DevTools regression tests run once a day
  #         cron: "0 0 * * *"
  #         filters:
  #           branches:
  #             only:
  #               - main
  #   jobs:
  #     - download_build:
  #         revision: << pipeline.git.revision >>
  #     - build_devtools_and_process_artifacts:
  #         requires:
  #           - download_build
  #     - run_devtools_tests_for_versions:
  #         requires:
  #           - build_devtools_and_process_artifacts
  #         matrix:
  #           parameters:
  #             version:
  #               - "16.0"
  #               - "16.5" # schedule package
  #               - "16.8" # hooks
  #               - "17.0"
  #               - "18.0"
  #     - run_devtools_e2e_tests_for_versions:
  #         requires:
  #           - build_devtools_and_process_artifacts
  #         matrix:
  #           parameters:
  #             version:
  #               - "16.0"
  #               - "16.5" # schedule package
  #               - "16.8" # hooks
  #               - "17.0"
  #               - "18.0"

  # # Used to publish a prerelease manually via the command line
  # publish_preleases:
  #   when: << pipeline.parameters.prerelease_commit_sha >>
  #   jobs:
  #     - publish_prerelease:
  #         name: Publish to Canary channel
  #         commit_sha: << pipeline.parameters.prerelease_commit_sha >>
  #         release_channel: stable
  #         # The tags to use when publishing canaries. The main one we should
  #         # always include is "canary" but we can use multiple (e.g. alpha,
  #         # beta, rc). To declare multiple, use a comma-separated string, like
  #         # this:
  #         #   dist_tag: "canary,alpha,beta,rc"
  #         #
  #         # TODO: We currently tag canaries with "next" in addition to "canary"
  #         # because this used to be called the "next" channel and some
  #         # downstream consumers might still expect that tag. We can remove this
  #         # after some time has elapsed and the change has been communicated.
  #         dist_tag: "canary,next,rc"
  #     - publish_prerelease:
  #         name: Publish to Experimental channel
  #         requires:
  #           # NOTE: Intentionally running these jobs sequentially because npm
  #           # will sometimes fail if you try to concurrently publish two
  #           # different versions of the same package, even if they use different
  #           # dist tags.
  #           - Publish to Canary channel
  #         commit_sha: << pipeline.parameters.prerelease_commit_sha >>
  #         release_channel: experimental
  #         dist_tag: experimental

  # # Publishes on a cron schedule
  # publish_preleases_nightly:
  #   unless: << pipeline.parameters.prerelease_commit_sha >>
  #   triggers:
  #     - schedule:
  #         # At 10 minutes past 16:00 on Mon, Tue, Wed, Thu, and Fri
  #         cron: "10 16 * * 1,2,3,4,5"
  #         filters:
  #           branches:
  #             only:
  #               - main
  #   jobs:
  #     - publish_prerelease:
  #         name: Publish to Canary channel
  #         commit_sha: << pipeline.git.revision >>
  #         release_channel: stable
  #         dist_tag: "canary,next,rc"
  #     - publish_prerelease:
  #         name: Publish to Experimental channel
  #         requires:
  #           # NOTE: Intentionally running these jobs sequentially because npm
  #           # will sometimes fail if you try to concurrently publish two
  #           # different versions of the same package, even if they use different
  #           # dist tags.
  #           - Publish to Canary channel
  #         commit_sha: << pipeline.git.revision >>
  #         release_channel: experimental
  #         dist_tag: experimental